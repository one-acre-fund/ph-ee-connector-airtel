trigger:
  - main
  - develop

pr:
  - main
  - release/*
  - develop

pool:
  vmImage: "ubuntu-latest"

variables:
  # Exposes GITGUARDIAN_API_KEY and GITHUB_TOKEN
  - group: CodeScanningTools

steps:
  - script: |
      VERSION_TAG=`git describe --abbrev=0 --tags`
      echo "##vso[task.setvariable variable=VERSION_TAG]$VERSION_TAG"
      IMAGE_TAGS="${VERSION_TAG}"
      echo "##vso[task.setvariable variable=IMAGE_SEMANTIC_HASH]$IMAGE_TAGS"
      if [[ "$(Build.SourceBranch)" == "refs/heads/main" ]]; then IMAGE_TAGS="$IMAGE_TAGS,latest"; fi;
      echo Tags: $IMAGE_TAGS
      echo "##vso[task.setvariable variable=IMAGE_TAGS]$IMAGE_TAGS"
    displayName: Get git tag

  - script: |
      # Initialize variables
      if [[ "${BUILD_REASON}" == "PullRequest" ]]; then
        echo "This is a PR build, scanning delta only, and posting check to PR head instead of local merge commit"
        export VALIDATE_ALL_CODEBASE=false
        # Hack to determine the commit hash of the PR's head, from the comment on the local merge commit
        # See https://github.com/oxsecurity/megalinter/issues/1279
        export GITHUB_SHA=$(git log -1 --pretty=%B | sed -e 's/^Merge //' -e 's/ into.*//')
      else
        echo "This is a regular build"
        export VALIDATE_ALL_CODEBASE=true
        export GITHUB_SHA=${BUILD_SOURCEVERSION}
      fi

      echo "VALIDATE_ALL_CODEBASE=${VALIDATE_ALL_CODEBASE}"
      echo "GITHUB_SHA=${GITHUB_SHA}"

      docker run -v "$(System.DefaultWorkingDirectory):/tmp/lint" \
        -e GITHUB_TOKEN \
        -e VALIDATE_ALL_CODEBASE \
        -e APPLY_FIXES=none \
        -e GITHUB_STATUS_REPORTER=true \
        -e GITHUB_COMMENT_REPORTER=true \
        -e CI=true \
        -e GITHUB_REF=$(Build.SourceBranch) \
        -e GITHUB_REPOSITORY=$(Build.Repository.ID) \
        -e GITHUB_TARGET_URL="$(System.CollectionUri)$(System.TeamProject)/_build/results?buildId=$(Build.BuildId)&view=logs" \
        -e GITHUB_SHA \
        oxsecurity/megalinter-java:v7
    displayName: Run MegaLinter
    env:
      GITHUB_TOKEN: $(GITHUB_TOKEN)

  - task: Docker@2
    displayName: Login to Azure registry
    inputs:
      containerRegistry: "azurecr-oaf"
      command: "login"

  - task: Docker@2
    displayName: Build and push image to container registry
    condition: and(succeeded(), or(eq(variables['Build.SourceBranchName'], 'main'), eq(variables['Build.SourceBranchName'], 'develop'), startsWith(variables['Build.SourceBranch'], 'refs/heads/release/')))
    inputs:
      command: buildAndPush
      repository: "oneacrefund/airtel-connector"
      dockerfile: "$(System.DefaultWorkingDirectory)/Dockerfile"
      containerRegistry: "azurecr-oaf"
      tags: |
        $(IMAGE_TAGS)

  - task: PublishBuildArtifacts@1
    displayName: Publish configuration package
    condition: and(succeeded(), or(eq(variables['Build.SourceBranchName'], 'main'), eq(variables['Build.SourceBranchName'], 'develop'), startsWith(variables['Build.SourceBranch'], 'refs/heads/release/')))
    inputs:
      PathtoPublish: $(Build.ArtifactStagingDirectory)
      ArtifactName: "airtel-connector"
      publishLocation: "Container"
