name: CI

on:
  push:
    branches:
      - main
      - develop
      - feature/git-actions
  pull_request:
    branches:
      - main
      - release/*
      - develop

jobs:
  build:
    runs-on: ubuntu-latest

    env:
      GITGUARDIAN_API_KEY: ${{ secrets.GITGUARDIAN_API_KEY }}
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    steps:
      - name: Checkout source code
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
          ref: ${{ github.event.before }}

      - name: Get Revision
        run: echo "Revision=${{ github.sha }}"

      - name: Generate image tags
        run: |
          VERSION_TAG=$(git describe --abbrev=0 --tags)
          echo "VERSION_TAG=${VERSION_TAG}"
          IMAGE_TAGS="${VERSION_TAG}.$(date '+%Y.%m.%d').${{ github.run_number }}"
          echo "IMAGE_SEMANTIC_HASH=${IMAGE_TAGS}"
          if [[ "${{ github.ref }}" == "refs/heads/main" ]]; then IMAGE_TAGS="$VERSION_TAG,latest"; fi;
          echo "IMAGE_TAGS=${IMAGE_TAGS}"

      - name: GitGuardian Scan
        run: |
          docker run \
            -v ${{ github.workspace }}:/data \
            --env-file <(env | grep -e SYSTEM_ -e BUILD_ -e TF_ -e AGENT_) \
            -e CI=true \
            -e GITGUARDIAN_API_KEY \
            gitguardian/ggshield:latest ggshield secret scan CI

      - name: Run MegaLinter
        run: |
          if [[ "${{ github.event_name }}" == "pull_request" ]]; then
            echo "This is a PR build, scanning delta only, and posting check to PR head instead of local merge commit"
            VALIDATE_ALL_CODEBASE=false
            GITHUB_SHA=$(git log -1 --pretty=%B | sed -e 's/^Merge //' -e 's/ into.*//')
          else
            echo "This is a regular build"
            VALIDATE_ALL_CODEBASE=true
            GITHUB_SHA=${{ github.sha }}
          fi

          echo "VALIDATE_ALL_CODEBASE=${VALIDATE_ALL_CODEBASE}"
          echo "GITHUB_SHA=${GITHUB_SHA}"

          docker run -v "${{ github.workspace }}:/tmp/lint" \
            -e GITHUB_TOKEN \
            -e VALIDATE_ALL_CODEBASE \
            -e APPLY_FIXES=none \
            -e GITHUB_STATUS_REPORTER=true \
            -e GITHUB_COMMENT_REPORTER=true \
            -e CI=true \
            -e GITHUB_REF=${{ github.ref }} \
            -e GITHUB_REPOSITORY=${{ github.repository }} \
            -e GITHUB_TARGET_URL="${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}" \
            -e GITHUB_SHA \
            oxsecurity/megalinter-java:v7

      - name: Login to Azure registry
        run: docker login azurecr-oaf

      - name: Build and push image to container registry
        run: |
          docker build -t "oneacrefund/airtel-connector:${{ env.IMAGE_TAGS }}" .
          docker push "oneacrefund/airtel-connector:${{ env.IMAGE_TAGS }}"

      - name: Publish configuration package
        if: >
          success() &&
          (
            github.event_name == 'push' &&
            (
              github.ref == 'refs/heads/main' ||
              github.ref == 'refs/heads/develop' ||
              startsWith(github.ref, 'refs/heads/release/') ||
              startsWith(github.ref, 'refs/heads/feature/')
            )
          )
        uses: actions/upload-artifact@v2
        with:
          name: airtel-connector
          path: ${{ github.workspace }}

